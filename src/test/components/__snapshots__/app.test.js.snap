// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<App /> component renders correctly 1`] = `
<CookiesProvider>
  <Provider
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <ForwardRef>
      <withCookies(Connect(App))
        cookies={
          Cookies {
            "HAS_DOCUMENT_COOKIE": true,
            "changeListeners": Array [
              [Function],
              [Function],
            ],
            "cookies": Object {},
          }
        }
        forwardedRef={null}
      >
        <Connect(App)
          allCookies={Object {}}
          cookies={
            Cookies {
              "HAS_DOCUMENT_COOKIE": true,
              "changeListeners": Array [
                [Function],
                [Function],
              ],
              "cookies": Object {},
            }
          }
        >
          <App
            allCookies={Object {}}
            cookies={
              Cookies {
                "HAS_DOCUMENT_COOKIE": true,
                "changeListeners": Array [
                  [Function],
                  [Function],
                ],
                "cookies": Object {},
              }
            }
            reLogUserIn={[Function]}
          >
            <BrowserRouter>
              <Router
                history={
                  Object {
                    "action": "POP",
                    "block": [Function],
                    "createHref": [Function],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                    "push": [Function],
                    "replace": [Function],
                  }
                }
              >
                <div
                  className="App"
                >
                  <Connect(Header)>
                    <Header
                      dispatch={[Function]}
                      isLoggedIn={false}
                    >
                      <header>
                        <nav
                          className="navbar navbar-expand-lg navbar-light bg-light"
                        >
                          <ConditionalHeader
                            isLoggedIn={false}
                          >
                            <div
                              className="collapse navbar-collapse"
                            >
                              <Link
                                className="navbar-brand"
                                replace={false}
                                style={
                                  Object {
                                    "paddingTop": "0px",
                                  }
                                }
                                to="/"
                              >
                                <a
                                  className="navbar-brand"
                                  href="/"
                                  onClick={[Function]}
                                  style={
                                    Object {
                                      "paddingTop": "0px",
                                    }
                                  }
                                >
                                  Sysco PoS System
                                </a>
                              </Link>
                              <div
                                className="navbar-nav ml-auto"
                              >
                                <Link
                                  className="nav-item nav-link"
                                  replace={false}
                                  to="/login"
                                >
                                  <a
                                    className="nav-item nav-link"
                                    href="/login"
                                    onClick={[Function]}
                                  >
                                    <i
                                      className="fas fa-sign-in-alt"
                                    />
                                     Login
                                  </a>
                                </Link>
                                <Link
                                  className="nav-item nav-link"
                                  replace={false}
                                  to="/register"
                                >
                                  <a
                                    className="nav-item nav-link"
                                    href="/register"
                                    onClick={[Function]}
                                  >
                                    Register
                                  </a>
                                </Link>
                              </div>
                            </div>
                          </ConditionalHeader>
                        </nav>
                      </header>
                    </Header>
                  </Connect(Header)>
                  <Route
                    path="/home"
                    render={[Function]}
                  />
                  <Route
                    exact={true}
                    path="/"
                    render={[Function]}
                  >
                    <ForwardRef>
                      <withCookies(withRouter(Connect(LogIn)))
                        cookies={
                          Cookies {
                            "HAS_DOCUMENT_COOKIE": true,
                            "changeListeners": Array [
                              [Function],
                              [Function],
                            ],
                            "cookies": Object {},
                          }
                        }
                        forwardedRef={null}
                      >
                        <withRouter(Connect(LogIn))
                          allCookies={Object {}}
                          cookies={
                            Cookies {
                              "HAS_DOCUMENT_COOKIE": true,
                              "changeListeners": Array [
                                [Function],
                                [Function],
                              ],
                              "cookies": Object {},
                            }
                          }
                        >
                          <Route>
                            <Connect(LogIn)
                              allCookies={Object {}}
                              cookies={
                                Cookies {
                                  "HAS_DOCUMENT_COOKIE": true,
                                  "changeListeners": Array [
                                    [Function],
                                    [Function],
                                  ],
                                  "cookies": Object {},
                                }
                              }
                              history={
                                Object {
                                  "action": "POP",
                                  "block": [Function],
                                  "createHref": [Function],
                                  "go": [Function],
                                  "goBack": [Function],
                                  "goForward": [Function],
                                  "length": 1,
                                  "listen": [Function],
                                  "location": Object {
                                    "hash": "",
                                    "pathname": "/",
                                    "search": "",
                                    "state": undefined,
                                  },
                                  "push": [Function],
                                  "replace": [Function],
                                }
                              }
                              location={
                                Object {
                                  "hash": "",
                                  "pathname": "/",
                                  "search": "",
                                  "state": undefined,
                                }
                              }
                              match={
                                Object {
                                  "isExact": true,
                                  "params": Object {},
                                  "path": "/",
                                  "url": "/",
                                }
                              }
                            >
                              <LogIn
                                allCookies={Object {}}
                                cookies={
                                  Cookies {
                                    "HAS_DOCUMENT_COOKIE": true,
                                    "changeListeners": Array [
                                      [Function],
                                      [Function],
                                    ],
                                    "cookies": Object {},
                                  }
                                }
                                history={
                                  Object {
                                    "action": "POP",
                                    "block": [Function],
                                    "createHref": [Function],
                                    "go": [Function],
                                    "goBack": [Function],
                                    "goForward": [Function],
                                    "length": 1,
                                    "listen": [Function],
                                    "location": Object {
                                      "hash": "",
                                      "pathname": "/",
                                      "search": "",
                                      "state": undefined,
                                    },
                                    "push": [Function],
                                    "replace": [Function],
                                  }
                                }
                                isLoggedIn={false}
                                location={
                                  Object {
                                    "hash": "",
                                    "pathname": "/",
                                    "search": "",
                                    "state": undefined,
                                  }
                                }
                                logUserIn={[Function]}
                                match={
                                  Object {
                                    "isExact": true,
                                    "params": Object {},
                                    "path": "/",
                                    "url": "/",
                                  }
                                }
                              >
                                <div
                                  className="d-flex justify-content-center"
                                >
                                  <div
                                    className="card"
                                    style={
                                      Object {
                                        "marginTop": "9rem",
                                        "width": "30%",
                                      }
                                    }
                                  >
                                    <div
                                      className="card-body"
                                    >
                                      <div
                                        className="alert alert-warning"
                                      />
                                      <form
                                        className="mx-2"
                                        onSubmit={[Function]}
                                      >
                                        <div
                                          className="input-group my-3"
                                        >
                                          <div
                                            className="input-group-prepend"
                                          >
                                            <span
                                              className="input-group-text"
                                              id="basic-addon1"
                                              style={
                                                Object {
                                                  "width": "125px",
                                                }
                                              }
                                            >
                                              Username
                                            </span>
                                          </div>
                                          <input
                                            aria-describedby="basic-addon1"
                                            aria-label="Username"
                                            autoComplete="true"
                                            autoFocus={true}
                                            className="form-control"
                                            name="username"
                                            onChange={[Function]}
                                            placeholder="Enter your username"
                                            required={true}
                                            type="text"
                                            value=""
                                          />
                                        </div>
                                        <div
                                          className="input-group"
                                        >
                                          <div
                                            className="input-group-prepend"
                                          >
                                            <span
                                              className="input-group-text"
                                              id="basic-addon2"
                                              style={
                                                Object {
                                                  "width": "125px",
                                                }
                                              }
                                            >
                                              Password
                                            </span>
                                          </div>
                                          <input
                                            aria-describedby="basic-addon2"
                                            aria-label="Password"
                                            autoComplete="true"
                                            className="form-control"
                                            name="password"
                                            onChange={[Function]}
                                            placeholder="Password here"
                                            required={true}
                                            type="password"
                                            value=""
                                          />
                                        </div>
                                        <button
                                          className="btn btn-primary text-uppercase my-3 sign-in-btn"
                                          style={
                                            Object {
                                              "width": "100%",
                                            }
                                          }
                                          type="submit"
                                        >
                                          Sign in
                                        </button>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </LogIn>
                            </Connect(LogIn)>
                          </Route>
                        </withRouter(Connect(LogIn))>
                      </withCookies(withRouter(Connect(LogIn)))>
                    </ForwardRef>
                  </Route>
                  <Route
                    path="/login"
                    render={[Function]}
                  />
                  <Route
                    path="/register"
                    render={[Function]}
                  />
                  <Route
                    path="/logout"
                    render={[Function]}
                  />
                  <Route
                    path="/my_orders"
                    render={[Function]}
                  />
                  <Route
                    path="/view_order"
                    render={[Function]}
                  />
                  <Route
                    path="/create_order"
                    render={[Function]}
                  />
                </div>
              </Router>
            </BrowserRouter>
          </App>
        </Connect(App)>
      </withCookies(Connect(App))>
    </ForwardRef>
  </Provider>
</CookiesProvider>
`;
